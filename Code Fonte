#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <stdlib.h>
#include<GL/freeglut.h>
#include<iostream>

// variaveis global
    GLfloat escala = 0.5;

    GLfloat translacaoX = 0;
    GLfloat translacaoY = 0;

    GLfloat rotacaoX = 0;
    GLfloat rotacaoY = 0;
    GLfloat rotacaoZ = 0;
//funçao que desenha a tela
 void desenha(void){
     //limpa os buffers para valores predefinidos.
    glClear(GL_COLOR_BUFFER_BIT );

    // especifica qual matriz é a matriz atual.
    glMatrixMode(GL_PROJECTION);

    //substitui a matriz atual pela matriz de identidade.
    glLoadIdentity();

    //multiplicam a matriz atual por uma matriz de dimensionamento geral.
    glScalef(escala, escala, 0);

    //multiplica a matriz atual por uma matriz de conversão.
    glTranslatef(translacaoX, translacaoY, 0);

    //multiplica a matriz atual por uma matriz de rotação.
    glRotatef(rotacaoX, 1, 0, 0);
    glRotatef(rotacaoY, 0, 1, 0);
    glRotatef(rotacaoZ, 0, 0, 1);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    // define uma matriz de projeção ortográfica 2D
    gluOrtho2D(-50, 50, -50, 50);

    //delimitam os vértices de um primitivo ou de um grupo de primitivas como primitivos.
    glEnd();

    //força a execução de funções OpenGL em tempo finito.
    glFlush();

    //delimitam os vértices de um primitivo ou de um grupo de primitivas como primitivos.
    glBegin (GL_LINES);

        //Especifica um vertice.
        // LETRA R
        glVertex2f(-25,0);
        glVertex2f(-25,15);

        glVertex2f(-25,15);
        glVertex2f(-20,15);

        glVertex2f(-25,8);
        glVertex2f(-20,8);

        glVertex2f(-20,15);
        glVertex2f(-20,8);

        glVertex2f(-25,8);
        glVertex2f(-20,0);

        // LETRA I
        glVertex2f(-18,15);
        glVertex2f(-18,0);

        //LETRA C
        glVertex2f(-16,15);
        glVertex2f(-16,0);

        glVertex2f(-16,15);
        glVertex2f(-11,15);

        glVertex2f(-16,0);
        glVertex2f(-11,0);

        //LETRA A
        glVertex2f(-9, 0);
        glVertex2f(-6, 15);

        glVertex2f(-6, 15);
        glVertex2f(-3, 0);

        glVertex2f(-7.6, 7);
        glVertex2f(-4.4, 7);

        // LETRA R
        glVertex2f(-1,0);
        glVertex2f(-1,15);

        glVertex2f(-1,15);
        glVertex2f(4,15);

        glVertex2f(-1,8);
        glVertex2f(4,8);

        glVertex2f(4,15);
        glVertex2f(4,8);

        glVertex2f(-1,8);
        glVertex2f(4,0);

        //LETRA D
        glVertex2f(6,0);
        glVertex2f(6,15);

        glVertex2f(6,15);
        glVertex2f(10,15);

        glVertex2f(10,15);
        glVertex2f(13,12);

        glVertex2f(13,12);
        glVertex2f(13,3);

        glVertex2f(6,0);
        glVertex2f(10,0);

        glVertex2f(10,0);
        glVertex2f(13,3);

        //LETRA O
        glVertex2f(15,0);
        glVertex2f(15,15);

        glVertex2f(15,15);
        glVertex2f(20,15);

        glVertex2f(15,0);
        glVertex2f(20,0);

        glVertex2f(20,15);
        glVertex2f(20,0);





    glEnd();

    glFlush();

}
    void listeningKey (unsigned char tecla, GLint x, GLint y)
    {
        switch(tecla)
        {
            //escalamento
            case '+':
                escala+=0.01;
                break;

            case '-':
                if(escala > 0.1)
                {
                    escala-=0.01;
                }
                break;

            //rotação
            case 'u':
                rotacaoX++;
                break;

            case 'i':
                rotacaoX--;
                break;

            case 'l':
                rotacaoY++;
                break;

            case 'p':
                rotacaoY--;
                break;

            case 'q':
                rotacaoZ++;
                break;

            case 'e':
                rotacaoZ--;
                break;


            //Translacao
            case 'a':
                translacaoX-=0.01;
                break;

            case 'd':
                translacaoX+=0.01;
                break;

            case 'w':
                translacaoY+=0.01;
                break;

            case 's':
                translacaoY-=0.01;
                break;
        }
    desenha();
    }
// estrutura basica do Glut
 int main(int argc, char* argv[])
{
    glutInit(&argc, argv);

    //Avisa qual modo de exibição deve ser usado quando a janela é criada.
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

    //TAMANHO
    glutInitWindowSize(800, 500);

    //POSIÇÃO
    glutInitWindowPosition(300, 100);

    //CRIA A JANELA
    glutCreateWindow("Mod 3D Ricardo");
    //ATIVA O TECLADO
    glutKeyboardFunc(listeningKey);
    //dESENHA NA TELA
    glutDisplayFunc(desenha);
    glClearColor(0, 0, 1, 0);
    glutMainLoop();

    return 0;
}
